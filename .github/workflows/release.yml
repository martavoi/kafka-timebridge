name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run tests
        run: go test -short ./...

      - name: Build binary
        run: |
          CGO_ENABLED=1 go build -o kafka-timebridge ./cmd

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build release binaries
        run: |
          # Create release binaries for Linux AMD64 only
          mkdir -p dist
          
          # Linux AMD64 (glibc - for Ubuntu/Debian/RHEL etc.)
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/kafka-timebridge-linux-amd64 ./cmd
          
          # Compress binaries
          cd dist
          for binary in kafka-timebridge-*; do
            tar -czf "${binary}.tar.gz" "${binary}"
            rm "${binary}"
          done

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Get version and rebuild with version
        if: success()
        id: version
        run: |
          # Get the version from the tag semantic-release just created
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"
          
          # Rebuild binaries with version information
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${VERSION}" -o dist/kafka-timebridge-linux-amd64 ./cmd
          
          # Re-compress with version
          cd dist
          for binary in kafka-timebridge-*; do
            tar -czf "${binary}.tar.gz" "${binary}"
            rm "${binary}"
          done

      - name: Upload release binaries
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Upload to release
          if [ -n "$(git tag --points-at HEAD)" ]; then
            gh release upload "${VERSION}" dist/*.tar.gz --clobber
          fi

      - name: Build and push Docker image
        if: success()
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          cache-from: type=gha

      - name: Update release notes with Docker info
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Add Docker image information to release notes
          if [ -n "$(git tag --points-at HEAD)" ]; then
            gh release edit "${VERSION}" --notes-file - << EOF
          $(gh release view "${VERSION}" --json body --jq .body)
          
          ## 🐳 Docker Images
          
          Docker images are automatically built and published to GitHub Container Registry:
          
          - **Latest**: \`ghcr.io/${{ github.repository }}:latest\`
          - **Tagged**: \`ghcr.io/${{ github.repository }}:${VERSION}\`
          
          ### Quick Start
          \`\`\`bash
          # Run the latest version
          docker run --rm ghcr.io/${{ github.repository }}:latest
          
          # Run this specific version
          docker run --rm ghcr.io/${{ github.repository }}:${VERSION}
          \`\`\`
          
          Images are based on Alpine Linux (~15MB) and include all dependencies.
          EOF
          fi
